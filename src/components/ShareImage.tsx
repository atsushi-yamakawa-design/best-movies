import { useRef, useEffect, useState } from "react";
import style from "./ShareImage.module.scss";

// アイコン素材
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faArrowUpFromBracket,
  faCircle,
  faCircleDown
} from "@fortawesome/free-solid-svg-icons";

interface ImagePageProps {
  backgroundUrl: string;
  movieImageUrls: string[];
  movieTitles: string[];
}

const ShareImage = ({
  backgroundUrl,
  movieImageUrls,
  movieTitles
}: ImagePageProps) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    if (canvasRef.current) {
      const canvas = canvasRef.current;
      const ctx = canvas.getContext("2d");
      const topThreeMovieImageUrls = movieImageUrls.slice(0, 3);
      const imagesToLoad = [backgroundUrl, ...topThreeMovieImageUrls];
      const imagePositions = [
        { x: 0, y: 0 }, // 背景画像
        { x: 220, y: 380 },
        { x: 220, y: 690 },
        { x: 220, y: 1000 }
      ];

      if (ctx) {
        Promise.all(
          imagesToLoad.map((src) => {
            return new Promise<HTMLImageElement>((resolve) => {
              const img = new Image();
              img.crossOrigin = "anonymous"; //CORSエラー対策
              img.onload = () => resolve(img);
              img.src = src;
            });
          })
        ).then((images) => {
          images.forEach((img, index) => {
            // 画像の描画
            const position = imagePositions[index];
            const ratio = img.naturalHeight / img.naturalWidth;
            const height =
              index === 0
                ? (img.naturalHeight / img.naturalWidth) * canvas.width
                : 170 * ratio;
            ctx.drawImage(
              img,
              position.x,
              position.y,
              index === 0 ? canvas.width : 190,
              height
            );
          });

          // 3番目までのテキストを描画
          movieTitles.slice(0, 3).forEach((title, index) => {
            ctx.fillStyle = "white";
            ctx.font = "bold 60px Arial";
            const position = imagePositions[index + 1];
            const textX = position.x + 190 + 30;
            const imageHeight =
              170 *
              (images[index + 1].naturalHeight /
                images[index + 1].naturalWidth);
            const textY = position.y + imageHeight / 2 - 20;
            wrapText(ctx, title || "（タイトルなし）", textX, textY, 640, 70);
          });

          // 4番目以降のテキストを描画
          let startY = 840 + 170 * 3;
          movieTitles.slice(3).forEach((title, index) => {
            const dynamicTitle = `${index + 4}. ${title || "（タイトルなし）"}`;
            ctx.font = "bold 46px Arial";
            const textX = 120;
            let textY = startY;
            const textHeight = wrapText(
              ctx,
              dynamicTitle,
              textX,
              textY,
              960,
              64
            );
            startY += textHeight + 24;
          });
        });
      }
    }
  }, [backgroundUrl, movieImageUrls, movieTitles]);

  // シェア用のテキスト生成
  const createShareText = (titles: string[]) => {
    let shareText = "My Best Movies 2023\n\n";

    // トップ3の映画タイトルのみを追加
    for (let i = 0; i < titles.length && i < 3; i++) {
      const title = titles[i];
      let medal = "";
      switch (i) {
        case 0:
          medal = "🥇 ";
          break;
        case 1:
          medal = "🥈 ";
          break;
        case 2:
          medal = "🥉 ";
          break;
        default:
          break; // トップ3以外は無視
      }
      shareText += `${medal}${title}\n`;
    }
    // ランキングの後ろに改行を2つ追加
    shareText += "\n\n";
    // クレジットテキストの追加
    let shareTextCredit = "generated by myBestMovie.com\n#myBestMovieOf2023";
    return shareText + shareTextCredit;
  };

  const shareCanvas = async () => {
    if (navigator.share && canvasRef.current) {
      const canvas = canvasRef.current;
      const shareText = createShareText(movieTitles);
      canvas.toBlob((blob) => {
        if (blob) {
          const file = new File([blob], "image.png", { type: "image/png" });
          navigator
            .share({
              files: [file],
              title: "My Best Movies 2023 ",
              text: shareText
            })
            .then(() => {
              console.log("共有が開始されました"); // 共有が開始されたことを示すアラート
            })
            .catch((error) => {
              console.error("Error sharing the image", error);
            });
        } else {
          alert("Blobがnullです");
          console.error("Failed to convert the canvas to a blob");
        }
      }, "image/png");
    } else {
      alert("モバイルデバイスのみ対応しています");
      console.log(
        "Web Share API is not supported in your browser, or canvas is null."
      );
    }
  };

  const downloadCanvas = () => {
    if (canvasRef.current) {
      const canvas = canvasRef.current;
      // キャンバスからデータURLを作成
      const imageUrl = canvas.toDataURL("image/png");

      // リンクを作成し、URLとダウンロード属性を設定
      const link = document.createElement("a");
      link.href = imageUrl;
      link.download = "my-best-movies.png";

      // ドキュメントに追加してダウンロードをトリガー
      document.body.appendChild(link);
      link.click();

      // 後処理
      document.body.removeChild(link);
    } else {
      console.log("キャンバスがnullです。画像をダウンロードできません。");
    }
  };

  return (
    <div className={style.canvasContainer}>
      <canvas ref={canvasRef} width="1179" height="2229" />
      <button onClick={shareCanvas} className={style.shareButton}>
        共有する
        <FontAwesomeIcon icon={faArrowUpFromBracket} className={style.icon} />
      </button>
      <button onClick={downloadCanvas} className={style.downloadButton}>
        <FontAwesomeIcon icon={faCircleDown} className={style.icon} />
      </button>
    </div>
  );
};

export default ShareImage;

function wrapText(
  context: CanvasRenderingContext2D,
  text: string,
  x: number,
  y: number,
  maxWidth: number,
  lineHeight: number,
  dryRun: boolean = false
): number {
  let newHeight = 0;
  const words = text.split(" ");
  let line = "";
  let lineCount = 0; // 行数をカウントする変数

  for (const word of words) {
    if (lineCount === 2) {
      // 2行を超えたら省略記号を追加して処理を終了
      line += "...";
      if (!dryRun) {
        context.fillText(line, x, y);
      }
      newHeight += lineHeight;
      break;
    }

    // 日本語か英語かによって処理を変える
    if (isJapanese(word)) {
      // 日本語の場合は文字単位で改行
      for (const char of word) {
        const testLine = line + char;
        if (context.measureText(testLine).width > maxWidth) {
          if (!dryRun) {
            context.fillText(line, x, y);
          }
          line = char;
          y += lineHeight;
          newHeight += lineHeight;
          lineCount++;
          if (lineCount === 2) {
            // 2行目に達したら次のループで省略記号を追加
            break;
          }
        } else {
          line = testLine;
        }
      }
      line += " ";
    } else {
      // 英語の単語の場合は単語単位で改行
      const testLine = line + word + " ";
      if (context.measureText(testLine).width > maxWidth) {
        if (!dryRun) {
          context.fillText(line, x, y);
        }
        line = word + " ";
        y += lineHeight;
        newHeight += lineHeight;
        lineCount++;
        if (lineCount === 2) {
          // 2行目に達したら次のループで省略記号を追加
          break;
        }
      } else {
        line = testLine;
      }
    }
  }

  // 最後の行を描画
  if (!dryRun && line.trim()) {
    context.fillText(line.trim(), x, y);
    newHeight += lineHeight;
  }

  return newHeight;
}

// 日本語かどうかを判断する簡単な関数
function isJapanese(text: string) {
  return /[\u3000-\u30FF\uFF00-\uFFEF\u4E00-\u9FAF\u3400-\u4DBF]/.test(text);
}
